// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  // Relationships
  projects        Project[]
  habits          Habit[]
  tasks           Task[]

  userPreferences UserPreferences?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// =======================================================================
// ================================ App ==================================
// =======================================================================

enum TaskStatus { // TODO: Review and simplify, define states clearly
  TO_DO
  SNOOZED
  SKIPPED
  IN_PROGRESS
  PAUSED
  COMPLETED
  CANCELLED

  @@map("task_status")
}

model Project {
  id          String        @id @default(uuid())
  title       String
  description String?       @db.Text
  priority    Int? // TODO: Review using floats for normalized values, so no scaling factor is needed
  
  // Scheduling
  startDate   DateTime @default(now())
  deadline    DateTime?
  status      ProjectStatus @default(NOT_STARTED)
  
  // Relationships
  tasks       Task[]
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId    String?
  subProjects Project[] @relation("ParentProjects")
  parent      Project?  @relation("ParentProjects", fields: [parentId], references: [id], onDelete: SetNull)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  completedAt DateTime?

  @@index([userId, status])
  @@map("projects")
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED

  @@map("project_status")
}

model Task {
  id              String     @id @default(uuid())
  title           String
  description     String?    @db.Text
  status          TaskStatus @default(TO_DO)
  durationMinutes Int?
  priority        Int?
  complexity      Int?
  due             DateTime?
  scheduledTime   String?

  // Relationships
  scheduleBlocks ScheduleBlock[] // Provides flexibility for future task splitting (for now only one block)
  taskCompletions TaskCompletion[] // For task completion tracking
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId      String?
  project        Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  habitId String?
  habit   Habit?  @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Habit {
  id              String     @id @default(uuid())
  title           String
  description     String?    @db.Text
  durationMinutes Int?
  priority        Int?
  active          Boolean    @default(true)
  recurrenceType  PeriodUnit
  interval        Int        @default(1)
  timesPerPeriod  Int        @default(1) // desired occurence count per period
  byWeekdays      Int[]      @default([]) // 0-6, 0 is Sunday
  customRule      Json?
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  occurrences     Task[]

  @@index([userId])
  @@index([userId, active])
  @@map("habits")
}

// REVIEW: Models for schedule and completion tracking could be merged into one model
model ScheduleBlock {
  id        String              @id @default(uuid())
  startTime DateTime
  endTime   DateTime
  
  // Relationships
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@map("schedule_blocks")
}

model TaskCompletion {
  id        String              @id @default(uuid())
  startTime DateTime
  endTime   DateTime
  
  // Relationships
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@map("task_completions")
}

model UserPreferences {
  id String @id @default(uuid())

  earliestTime        String
  latestTime          String
  dailyMaxMin         Int
  dailyOptimalMin     Int
  aggressiveness      Float
  allowCalendarWrites Boolean
  timezone            String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum PeriodUnit {
  DAY
  WEEK
  MONTH
  YEAR
}
